'''from typing_extensions import ParamSpecArgs'''
from typing import Generator, List, Dict, Tuple
import calendar
import datetime
from collections import defaultdict, deque
import itertools
import numpy as np
from more_itertools import distinct_permutations
import statistics

print("Enter year and month: year-month ex)2024-3")
yearmonth = input()
"""get year and month of the making schedule"""


datelist = yearmonth.replace(" ", "").split("-")
datelist[1] = datelist[1]

datetime_date = datetime.date(int(datelist[0]), int(datelist[1]), 1)
firstdayofweek = datetime_date.weekday()
monthrange = calendar.monthrange(int(datelist[0]), int(datelist[1]))[1]
"""get monthrange and day of week of the first day of month"""

print("Enter the holidays: day1, day2, ... ex)4,5,6,15,29")
holidays = input()
holidays = holidays.replace(" ","").split(",")
if holidays[0] != '':
    for i in range(len(holidays)):
        holidays[i] = int(holidays[i])
"""get holidays for the month"""

dutytypes = ["평야", "금야", "토야", "일야"]
"""list of duty types"""

calen = []

for i in range(monthrange):
    if firstdayofweek == 0:
        calen.append([i+1, firstdayofweek, "월"])
    elif firstdayofweek == 1:
        calen.append([i+1, firstdayofweek, "화"])
    elif firstdayofweek == 2:
        calen.append([i+1, firstdayofweek, "수"])
    elif firstdayofweek == 3:
        calen.append([i+1, firstdayofweek, "목"])
    elif firstdayofweek == 4:
        calen.append([i+1, firstdayofweek, "금"])
    elif firstdayofweek == 5:
        calen.append([i+1, firstdayofweek, "토"])
    else:
        calen.append([i+1, firstdayofweek, "일"])

    if firstdayofweek < 6:
        firstdayofweek += 1
    else : firstdayofweek = 0


for i in holidays:
    for c in range(len(calen)):
        if i == calen[c][0]:
            calen[c][1] = 5

yesteroff = False
for i in range(len(calen)):
    if calen[i][1] == 5 or calen[i][1] == 6:
        if yesteroff == True: calen[i][1] = 6
        yesteroff = True
    else: yesteroff = False
'''modify the type of the holiays'''

for i in range(len(calen)):
    if  calen[i][1] <= 3:
        calen[i].append(dutytypes[0])
    elif calen[i][1] == 4:
        calen[i].append(dutytypes[1])
    elif calen[i][1] == 5:
        calen[i].append(dutytypes[2])
    elif calen[i][1] == 6:
        calen[i].append(dutytypes[3])
"""until now, got the calender for the month of the schedule"""
print(calen)


print("Enter the workers: name1, name2, ...")
workers = input()
workers = workers.replace(" ","").split(",")
"""get workers"""

print("Enter the dayoffs of workers; name1: day1 ~ day2, day3, name2: ...")
dayoffs = input()
'''get input of dayoffs'''

def processdayoff(dayoffs):
    temp = dayoffs.replace(" ", '')

    workerindex = []
    for q in workers:
        if temp.find(q) == -1: continue
        else:
            workerindex.append(temp.find(q))

    resultdraft = []
    previous = len(temp) + 1
    for e in reversed(range(len(workerindex))):
        resultdraft.append(temp[workerindex[e]:previous])
        previous = workerindex[e]


    resultdraft2 = {}
    for r in resultdraft:
        resultdraft2[r.split(':')[0]] = r.split(':')[1]

    for t in resultdraft2:
        resultdraft2[t] = resultdraft2[t].replace('/', '').split(',')
        for y in resultdraft2[t]:
            if y == '': resultdraft2[t].remove('')

    resultdraft3 = {}

    for u in resultdraft2:
        resultdraft3[u] = []
        for i in range(len(resultdraft2[u])):
            if '~' in resultdraft2[u][i]:
                o = resultdraft2[u][i].split('~')
                for p in range(int(o[0]), int(o[1])+1):
                    resultdraft3[u].append(p)
            else: resultdraft3[u].append(int(resultdraft2[u][i]))

    for a in workers:
        if a not in resultdraft3.keys():
            resultdraft3[a] = []

    return resultdraft3

dayoffs = processdayoff(dayoffs)
"""process the dayoffs input string"""


weights = {}
weights["평야"] = 1
weights["금야"] = 1.8
weights["토야"] = 1.5
weights["일야"] = 0.7
"""allot weights for each dutytype"""

def daybyduty(calen):
    daybyduties = {}
    for i in dutytypes:
        daybyduties[i] = []

    for i in calen:
      daybyduties[i[3]].append(i[0])

    return daybyduties


wholedaybyduties = daybyduty(calen)

monthlyduties = [r[3] for r in calen]
"""get all duties fo each divided calendar"""

def dutysort(e):
  return weights[e]
'''key parameter for sorting function of monthlyduties'''
monthlyduties.sort(reverse = True, key = dutysort)
"""get and sort montly services"""

def dutygroups(monthlyduties):
    dutygroups = {}
    for i in range(len(workers)): dutygroups[i] = []

    def elementcnt(e):
        return len(dutygroups[e])

    for i in monthlyduties:
        groupweights = {}
        sums = {}
        for w in dutygroups:
            d = []
            for c in dutygroups[w]:
                d.append(weights[c])
            groupweights[w] = d


        for a in groupweights:
            sums[a] = sum(groupweights[a])

        finkeys = list(dict(sorted(sums.items(), key = lambda a: a[1])))

        dutygroups[finkeys[0]].append(i)

    return dutygroups

dutygroups = dutygroups(monthlyduties)
print(dutygroups)
"""alloting works for each anonymous workers regarging weights; by greedy allocation"""



def workerbyduty(dutygroups):
  workerbyduties = {}
  for i in dutytypes:
    workerbyduties[i] = []

  for i in dutygroups:
    for c in dutygroups[i]:
      workerbyduties[c].append(i)

  return workerbyduties

workerbyduties = workerbyduty(dutygroups)
"""group anonymous workers for each dutytype"""
print(workerbyduties)
daybyduties = daybyduty(calen)
"""group days for each dutytype"""
print(daybyduties)

def sortandtestadjacent(matched):
  smatched = dict(sorted(matched.items()))
  previous = -1
  for q in smatched:
    if smatched[q] == previous: return False
    previous = smatched[q]
  else : return smatched
'''filter1'''

def evaluatescore(matched):
  '''matched has to be sorted by date'''
  score = 0

  workingdays = {}
  for m in workers:
    workingdays[m] = [0]
  for q in matched:
    workingdays[matched[q]].append(q)
  for j in workers:
    workingdays[j].append(monthrange+1)

  gaps = []
  for e in workingdays:
    for r in range(len(workingdays[e])-1):
      gaps.append(workingdays[e][r+1] - workingdays[e][r])

  for t in gaps:
    score += np.log(t)
  return score
'''filter2'''

def allotworkers(matched):
    for q in itertools.permutations(workers):
      allotedmatched = {}
      for w in matched:
        allotedmatched[w] = q[int(matched[w])]
      yield allotedmatched


def concerndayoffs(allotedmatched):
  for q in dayoffs:
    for w in dayoffs[q]:
      if allotedmatched[w] == q:
        return False
  else : return True
'''filter3'''

def schedulelog(case):
  result : Dict[str,dict] = {}
  resulttemp : Dict[str,list] = {}
  for a in workers:
    resulttemp[a] = []
  for q in case:
    resulttemp[case[q]].append(calen[q-1][3])
  for w in resulttemp:
    dictt = {}
    for e in dutytypes:
      dictt[e] = 0
    for r in resulttemp[w]:
      dictt[r] += 1
    result[w] = dictt

  return result

def filtermatched(workerbyduty, daybyduty):

  for e in distinct_permutations(workerbyduty):
    matched = {}
    for h in range(len(workerbyduty)):
      matched[daybyduty[h]] = e[h]

    filtered1 = sortandtestadjacent(matched)
    '''filter1'''

    if not filtered1: continue
    else: 
      for v in allotworkers(filtered1):
        if concerndayoffs(v): yield v
        '''filter3'''

matchedbyduty = {}

for i in dutytypes:
  matchedbyduty[i] = list(filtermatched(workerbyduties[i], daybyduties[i]))

print(matchedbyduty)

