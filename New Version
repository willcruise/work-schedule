import numpy as np
import calendar
import datetime
import itertools


#get year and month of the making schedule
print("Enter year and month: year-month ex)2024-3")
yearmonth = input()

#get monthrange and first day of week of the month
datelist = yearmonth.replace(" ", "").split("-")
datetime_date = datetime.date(int(datelist[0]), int(datelist[1]), 1)

dayofweek = datetime_date.weekday()
monthrange = calendar.monthrange(int(datelist[0]), int(datelist[1]))[1]

#get holidays
print("Enter the holidays: day1, day2, ... ex)4,5,6,15,29")
holidaysinput = input()
holidaysinput = holidaysinput.replace(" ","").split(",")
holidays = []
for i in holidaysinput:
  if i != '':
    holidays.append(int(i))

#dutytypes
dutytypes = ["평야", "금야", "토야", "일야"]

# constants: dayofweek, monthrange, holidays, dutytypes
################################################################################

# make calendar
def makecalen(dayofweek, monthrange):
  calen = {}
  #set initial dutytypes regarding to day of week
  for i in range(1, monthrange + 1):
    calen[i] = []
    if dayofweek == 0:
      calen[i].append(dayofweek)
    elif dayofweek == 1:
      calen[i].append(dayofweek)
    elif dayofweek == 2:
      calen[i].append(dayofweek)
    elif dayofweek == 3:
      calen[i].append(dayofweek)
    elif dayofweek == 4:
      calen[i].append(dayofweek)
    elif dayofweek == 5:
      calen[i].append(dayofweek)
    else:
      calen[i].append(dayofweek)

    if dayofweek < 6:
      dayofweek += 1
    else : dayofweek = 0

  return calen

calendraft = makecalen(dayofweek, monthrange)

# modify the dutytype regarding holidays
def modcal(calendraft):
  for i in holidays:
    calendraft[i][0] = 5

  yesteroff = False
  for i in calendraft:
    if calendraft[i][0] == 5 or calendraft[i][0] == 6:
        if yesteroff == True: calendraft[i][0] = 6
        yesteroff = True
    else: yesteroff = False


  for i in calendraft:
    if  calendraft[i][0] <= 3:
        calendraft[i].append(dutytypes[0])
    elif calendraft[i][0] == 4:
        calendraft[i].append(dutytypes[1])
    elif calendraft[i][0] == 5:
       calendraft[i].append(dutytypes[2])
    elif calendraft[i][0] == 6:
        calendraft[i].append(dutytypes[3])

  return calendraft

calen = modcal(calendraft)
print(calen)
################################################################################
#get workers
print("Enter the workers: name1, name2, ...")
workers = input()
workers = workers.replace(" ","").split(",")
"""get workers"""

################################################################################
#get dayoffs
print("Enter the dayoffs of workers; name1: day1 ~ day2, day3, name2: ...")
dayoffs = input()

#process the dayoff string
def processdayoff(dayoffs):
    temp = dayoffs.replace(" ", '')

    workerindex = []
    for q in workers:
        if temp.find(q) == -1: continue
        else:
            workerindex.append(temp.find(q))

    resultdraft = []
    previous = len(temp) + 1
    for e in reversed(range(len(workerindex))):
        resultdraft.append(temp[workerindex[e]:previous])
        previous = workerindex[e]


    resultdraft2 = {}
    for r in resultdraft:
        resultdraft2[r.split(':')[0]] = r.split(':')[1]

    for t in resultdraft2:
        resultdraft2[t] = resultdraft2[t].replace('/', '').split(',')
        for y in resultdraft2[t]:
            if y == '': resultdraft2[t].remove('')

    resultdraft3 = {}

    for u in resultdraft2:
        resultdraft3[u] = []
        for i in range(len(resultdraft2[u])):
            if '~' in resultdraft2[u][i]:
                o = resultdraft2[u][i].split('~')
                for p in range(int(o[0]), int(o[1])+1):
                    resultdraft3[u].append(p)
            else: resultdraft3[u].append(int(resultdraft2[u][i]))

    for a in workers:
        if a not in resultdraft3.keys():
            resultdraft3[a] = []

    return resultdraft3

dayoffs = processdayoff(dayoffs)

################################################################################
#weights for each dutytype
weights = {}
weights["평야"] = 1
weights["금야"] = 1.8
weights["토야"] = 1.5
weights["일야"] = 0.7
################################################################################

#initialize table
row = len(workers)
col = monthrange
inittable = np.zeros((row, col), dtype = np.int8).tolist()

#match workers and column
wmatch = {}
for i in range(len(workers)):
  wmatch[i] = workers[i]
  wmatch[workers[i]] = i


def markdayoffs(table):
  for w in dayoffs:
    for d in dayoffs[w]:
      table[wmatch[w]][d] = -1
  return table

# mark dayoff slots to -1
inittable = markdayoffs(inittable)

#generate weightstate of each column(worker) of table
def genweightstate(table):
  weightstate = {}

  for i in range(len(table)):
    weightstate[i] = 0
    for j in range(len(table[0])):
      if table[i][j] == 1:
        weightstate[i] += weights[calen[j+1][1]]

  return weightstate

#return column(worker) of minimum weight sum
def getmins(weightstate):
  result = []
  value = -1
  for k in weightstate:
    if value == -1:
      value = weightstate[k]
      result.append(k)
    else:
      if value < weightstate[k] : continue
      elif value > weightstate[k]:
        result.clear()
        result.append(k)
        value = weightstate[k]
      else: result.append(k)

  return result

def getlatest(table, row):
  for col in reversed(range(len(table[row]))):
    if table[row][col] == 1: return col
    return -1
    

#allot worker
def allotworker(table, col):
  weightstate = genweightstate(table)
  for r in range(len(table)):
    if table[r][col] == -1:
      del weightstate[r]

  candidates = getmins(weightstate)

  #more restrictions: pick one worker which the latest work is farthest
  minval = len(table[0])
  finalcandidate = []
  for candidate in candidates:
    test = getlatest(table, candidate)
    if minval < test: continue
    elif minval > test:
      finalcandidate.clear()
      finalcandidate.append(candidate)
      minval = test
    else: finalcandidate.append(candidate)
  
  table[finalcandidate[0]][col] = 1

  return table



#iterate through columns of table and generate final table
table = inittable
for itercol in range(col):
  table = allotworker(table, itercol)


for c in range(len(workers)):
  for r in range(monthrange):
    if table[c][r] == 1:
      calen[r+1].append(wmatch[c])

print(calen)
















