import numpy as np
import calendar
import datetime


#get year and month of the making schedule
print("Enter year and month: year-month ex)2024-3")
yearmonth = input()

#get monthrange and first day of week of the month
datelist = yearmonth.replace(" ", "").split("-")
datetime_date = datetime.date(int(datelist[0]), int(datelist[1]), 1)

dayofweek = datetime_date.weekday()
monthrange = calendar.monthrange(int(datelist[0]), int(datelist[1]))[1]

#get holidays
print("Enter the holidays: day1, day2, ... ex)4,5,6,15,29")
holidaysinput = input()
holidaysinput = holidaysinput.replace(" ","").split(",")
holidays = []
for i in holidaysinput:
  if i != '':
    holidays.append(int(i))

#dutytypes
dutytypes = ['평야', '금야', '토주야', '일주야']


# make calendar
def makecalen(dayofweek, monthrange):
  calen = {}
  #set initial dutytypes regarding to day of week
  for i in range(1, monthrange + 1):
    calen[i] = []
    if dayofweek == 0:
      calen[i].append(dayofweek)
      calen[i].append('월')
    elif dayofweek == 1:
      calen[i].append(dayofweek)
      calen[i].append('화')
    elif dayofweek == 2:
      calen[i].append(dayofweek)
      calen[i].append('수')
    elif dayofweek == 3:
      calen[i].append(dayofweek)
      calen[i].append('목')
    elif dayofweek == 4:
      calen[i].append(dayofweek)
      calen[i].append('금')
    elif dayofweek == 5:
      calen[i].append(dayofweek)
      calen[i].append('토')
    else:
      calen[i].append(dayofweek)
      calen[i].append('일')

    if dayofweek < 6:
      dayofweek += 1
    else : dayofweek = 0

  return calen

calendraft = makecalen(dayofweek, monthrange)

# modify the dutytype regarding holidays
def modifycal(calendraft):
  for i in holidays:
    calendraft[i][0] = 5

  yesteroff = False
  for i in calendraft:
    if calendraft[i][0] == 5 or calendraft[i][0] == 6:
        if yesteroff == True: calendraft[i][0] = 6
        yesteroff = True
    else: yesteroff = False


  for i in calendraft:
    if  calendraft[i][0] <= 3:
        calendraft[i].append(dutytypes[0])
    elif calendraft[i][0] == 4:
        calendraft[i].append(dutytypes[1])
    elif calendraft[i][0] == 5:
       calendraft[i].append(dutytypes[2])
    elif calendraft[i][0] == 6:
        calendraft[i].append(dutytypes[3])

  return calendraft

calen = modifycal(calendraft)



#get workers
print("Enter the workers: name1, name2, ...")
workers = input()
workers = workers.replace(" ","").split(",")
"""get workers"""


#get dayoffs
print("Enter the dayoffs of workers; name1: day1 ~ day2, day3, name2: ...")
dayoffs = input()

#process the dayoff string to necessary form
def processdayoff(dayoffs):
    temp = dayoffs.replace(" ", '')

    workerindex = []
    for q in workers:
        if temp.find(q) == -1: continue
        else:
            workerindex.append(temp.find(q))

    resultdraft = []
    previous = len(temp) + 1
    for e in reversed(range(len(workerindex))):
        resultdraft.append(temp[workerindex[e]:previous])
        previous = workerindex[e]


    resultdraft2 = {}
    for r in resultdraft:
        resultdraft2[r.split(':')[0]] = r.split(':')[1]

    for t in resultdraft2:
        resultdraft2[t] = resultdraft2[t].replace('/', '').split(',')
        for y in resultdraft2[t]:
            if y == '': resultdraft2[t].remove('')

    resultdraft3 = {}

    for u in resultdraft2:
        resultdraft3[u] = []
        for i in range(len(resultdraft2[u])):
            if '~' in resultdraft2[u][i]:
                o = resultdraft2[u][i].split('~')
                for p in range(int(o[0]), int(o[1])+1):
                    resultdraft3[u].append(p)
            else: resultdraft3[u].append(int(resultdraft2[u][i]))

    for a in workers:
        if a not in resultdraft3.keys():
            resultdraft3[a] = []

    resultdraft4 = {}
    for date in range(1, monthrange+1):
      resultdraft4[date] = []

    for w in resultdraft3:
      for date in resultdraft3[w]:
        resultdraft4[date].append(w)

    return resultdraft4

dayoffs = processdayoff(dayoffs)


#weights for each dutytype
weights = {}
weights[dutytypes[0]] = 1
weights[dutytypes[1]] = 1.8
weights[dutytypes[2]] = 1.5
weights[dutytypes[3]] = 0.7

# constants: monthrange, holidays, dutytypes, weights, row, col

#initialize table for alloting workers
row = len(workers)
col = monthrange
inittable = np.zeros((row, col), dtype = np.int8)

#initialize table for matching dutytype for each days 
dayanddutytype = np.zeros((monthrange, len(dutytypes)))
for r in range(monthrange):
  for c in range(len(dutytypes)):
    if dutytypes[c] == calen[r+1][2] :
      dayanddutytype[r, c] = weights[dutytypes[c]]

#utility: match workers and column
wmatch = {}
for i in range(len(workers)):
  wmatch[i] = workers[i]
  wmatch[workers[i]] = i


#utility: match dutytype and index(column)
dmatch = {}
for i in range(len(dutytypes)):
  dmatch[i] = dutytypes[i]
  dmatch[dutytypes[i]] = i


#generate weightstate of each column(worker) of table
def genweightstate(table):
  weightstate = np.matmul(table, dayanddutytype)

  return weightstate

#return column(worker) of minimum weight sum
def getmins(weightstate, dutytype):
  col = dmatch[dutytype]
  result = []
  value = -1
  for r in range(len(weightstate)):
    if value == -1:
      value = weightstate[r, col]
      result.append(r)
    else:
      if value < weightstate[r, col] : continue
      elif value > weightstate[r, col]:
        result.clear()
        result.append(r)
        value = weightstate[r, col]
      else: result.append(r)

  return result

#return latest day the work is done 
def getlatest(table, row):
  for col in reversed(range(monthrange)):
    if table[row,col] == 1: return col
  else: return -1


#allot worker to table of column
def allotworker(table, col):
  #get weightstate of table; weightstate is a indicater for 
  #checking the amount of work done to date by each worker  
  weightstate = genweightstate(table)

  #concern dayoffs : set data value of the dayoff worker(row) to 128(large)
  for w in dayoffs[col+1]:
    r = wmatch[w]
    for c in range(len(weightstate[r])):
      weightstate[r, c] = 128

  #get final candadites from weightstate by picking worker who has done minimum work
  candidates = getmins(weightstate, calen[col+1][2])

  #pick one worker which the day of latest work is farthest from candidates
  minval = len(table[0])
  finalcandidate = []
  for candidate in candidates:
    test = getlatest(table, candidate)
    if minval < test: continue
    elif minval > test:
      finalcandidate.clear()
      finalcandidate.append(candidate)
      minval = test
    else: finalcandidate.append(candidate)

  table[finalcandidate[0],col] = 1

  return table

#iterate through columns of table, allot worker,  and render final table
table = inittable
for itercol in range(col):
  table = allotworker(table, itercol)

for c in range(len(workers)):
  for r in range(monthrange):
    if table[c][r] == 1:
      calen[r+1].append(wmatch[c])

for g in calen:
  print(g, ':', calen[g][1], calen[g][3])


#make schedule log and print
def schedulelog(table):
  log = {}
  for w in workers:
    log[w] = {}
    for d in dutytypes:
      tmp = {d:0}
      log[w].update(tmp)

  for r in range(len(table)):
    for c in range(len(table[r])):
      if table[r, c] == 1:
        for d in dutytypes:
          if calen[c+1][2] == d: log[wmatch[r]][d] += 1

  for w in log:
    print(w, ':', log[w])

schedulelog(table)

